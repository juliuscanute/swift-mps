//will pull the groovy classes/types from nexus to the classpath
buildscript {
    repositories {
        maven { url 'https://projects.itemis.de/nexus/content/repositories/mbeddr' }
        mavenCentral()
    }
    dependencies {
        classpath 'de.itemis.mps:mps-gradle-plugin:1.4.+'
    }
}

// ------------- /DEPENDENCY VERSIONS -------------


plugins {
    id 'base'
    id 'maven-publish'
    id "de.undercouch.download" version "4.1.1"
}


// ------------- DEPENDENCY CONFIG -------------
// Make BuildLanguages and GenerateLibrariesXml available
import de.itemis.mps.gradle.*

// Tools to determine architecture
import org.apache.tools.ant.taskdefs.condition.Os
// ------------- DEPENDENCY VERSIONS ------------- 
// Dependency versions
ext.mpsVersion = '2020.2.3'
ext.iets3OpenSourceVersion = '2020.2+'
ext.dependencyRepositories = [
        'https://projects.itemis.de/nexus/content/repositories/mbeddr',
        'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
]

repositories {
    mavenCentral()
    for (repoUrl in project.dependencyRepositories) {
        maven {
            url repoUrl
        }
    }
}

configurations {
    mps
    mpsArtifacts
    junitAnt
}

dependencies {
    mps "com.jetbrains:mps:$mpsVersion"
    mpsArtifacts "org.iets3:opensource:$iets3OpenSourceVersion"
    mpsArtifacts "de.itemis.mps:extensions:2020.2+"
    junitAnt 'org.apache.ant:ant-junit:1.10.9'
}

// ------------- /DEPENDENCY CONFIG -------------


// ------------- DEPENDENCY RESOLUTION -------------
// JDK_HOME required for adding tools.jar into classpath of the forked ant process
// ==== resolving java 11 ====
def jdkHome
def downloadJdk = false


// Sdk specified
if (project.hasProperty("jdk")) {
    // No further check
    jdkHome = project.property('jdk')
}

// Current java version is 11
else if (JavaVersion.current() == JavaVersion.VERSION_11) {
    // Perfect then -> use it
    jdkHome = System.getProperty('java.home')
}

// Neither specified, but MPS installation provided with a jbr folder !
else if (project.hasProperty("mpsDir") && file("$mpsDir/jbr").exists()) {
    // That was close
    jdkHome = "$mpsDir/jbr"
}

else {
    // No option left but to download it :c
    // We set a flag so we wait for a task to actually need it
    downloadJdk = true
	jdkHome = "$buildDir/jbrsdk"
}

task resolveJdk(type: Download) {
	doFirst {
	    println "Java 11, which is required to build dependencies, was not found."
	    println "We will download one for you."
		mkdir file(jdkHome)
	}
	
	def arch = System.properties['sun.arch.data.model'].equals("64") ? "x64" : "x86"
	def os
	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        os = "windows"
    } else {
    	os = "linux"
    }

    def filename = "jbrsdk-11_0_8-$os-$arch-b1145.3.tar.gz"

    src "https://dl.bintray.com/jetbrains/intellij-jbr/$filename"
	dest "$buildDir/$filename"
	overwrite false

}

task unpackJdk(type: Copy, dependsOn: resolveJdk) {
    from tarTree(resources.gzip(resolveJdk.dest))
    into "$buildDir"
}


task resolveMps(type: Copy) {
    dependsOn configurations.mps
    from {
        configurations.mps.resolve().collect { zipTree(it) }
    }
    into "$buildDir/mps"
}

task resolveMpsArtifacts(type: Copy) {
    from {
        configurations.mpsArtifacts.resolve().collect { zipTree(it) }
    }
    into "$buildDir/artifacts"
}

// ------------- /DEPENDENCY RESOLUTION -------------


// ------------- BUILD SCRIPT PARAMS -------------
ext.artifactsDir = new File(rootDir, 'artifacts')
ext.build_dir = '-Dbuild.dir=' + file(rootProject.projectDir.absolutePath).getAbsolutePath()
ext.artifacts_dir = '-Dartifacts.root=' + new File(buildDir, 'artifacts')
ext.mps_home = '-Dmps.home=' + resolveMps.destinationDir.getAbsolutePath()
ext.buildScriptArgs = [mps_home, build_dir, artifacts_dir]
// tools might be needed later for running test scripts
ext.buildScriptClasspath = project.configurations.junitAnt.fileCollection({ true }) + project.files("$jdkHome/lib/tools.jar")

// ------------- /BUILD SCRIPT PARAMS -------------

// ------------- BUILD TASKS -------------
task buildAllScripts(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts]) {
    if (downloadJdk) dependsOn "unpackJdk"
    // script rootProject.file('build/mpsintrocourse.allScripts/build.xml')
    script "$rootDir/build/mpsintrocourse.allScripts/build.xml"
    scriptArgs = buildScriptArgs
    scriptClasspath = buildScriptClasspath
}

task buildMpsIntroCourse(type: BuildLanguages, dependsOn: [resolveMps, resolveMpsArtifacts, buildAllScripts]) {
    script rootProject.file('build/mpsintrocourse/build.xml')
    scriptArgs = buildScriptArgs
    scriptClasspath = buildScriptClasspath
}

task generateLibrariesXml(type: GenerateLibrariesXml) {
    dependsOn resolveMpsArtifacts
    description "Will read project libraries from projectlibraries.properties and generate libraries.xml in .mps directory. Libraries are loaded in mps during start."
    defaults rootProject.file('projectlibraries.properties')
    overrides rootProject.file('projectlibraries.overrides.properties')
    destination file('.mps/libraries.xml')
}

task setup {
    dependsOn generateLibrariesXml
    dependsOn resolveMpsArtifacts
    description 'Set up MPS project libraries. Libraries are read in from projectlibraries.properties file.'
}

defaultTasks "setup", "buildMpsIntroCourse"

// ------------- /BUILD TASKS -------------
